@page "/login"
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject NavigationManager NavigationManager;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Services.IUserService userService

<EditForm Model="@user" OnValidSubmit="@ValidateUser">
    <h4 class="text-center" style="font-weight:bold;color:purple;">
        Book Stores Login
    </h4>
    <div class="container">
        <div class="row text-center">
            <div class="col-12">
                <input class="form-control" type="email" @bind="user.EmailAddress" placeholder="Email Address..." />
            </div>
            <div class="col-12 mt-2">
                <input class="form-control" type="password" @bind="user.Password" placeholder="Password..." />
            </div>
            <div class="col-2 mt-2">
                <input type="submit" class="form-control btn btn-outline-primary" value="Login" />
            </div>
            <div class="col-2 mt-2">
                <a class="btn btn-outline-success" href="/signup">Sign Up</a>
            </div>

            <div class="col-12 row">
                <span>
                    @LoginMessage
                </span>
            </div>
        </div>
    </div>
</EditForm>


@code {
    private Data.User user;
    public string LoginMessage { get; set; }

    protected override System.Threading.Tasks.Task OnInitializedAsync()
    {
        user = new Data.User();
        return base.OnInitializedAsync();
    }

    private async System.Threading.Tasks.Task<bool> ValidateUser()
    {
        //string serializedUser =  Newtonsoft.Json.JsonConvert.SerializeObject(user);

        ////HttpRequestMessage httpRequestMessage = new HttpRequestMessage();
        ////httpRequestMessage.Method = new HttpMethod("POST");
        ////httpRequestMessage.RequestUri = new Uri("http://localhost:4615/api/Users/Login");

        //HttpRequestMessage httpRequestMessage = 
        //    new HttpRequestMessage(HttpMethod.Post , "Login");


        //httpRequestMessage.Content = new StringContent(serializedUser);
        //httpRequestMessage.Content.Headers.ContentType =
        //    new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");

        //var client = httpClientFactory.CreateClient("UserService");

        //var response =
        //   await client.SendAsync(httpRequestMessage);

        //var responseStatusCode = response.StatusCode;
        //var responseBody =
        //    await response.Content.ReadAsStringAsync();

        var returnedUser =
            await userService.LoginAsync(user);

        if(returnedUser.EmailAddress != null)
        {
            //Data.User returnedUser =
            //        Newtonsoft.Json.JsonConvert.DeserializeObject<Data.User>(responseBody);

            await sessionStorage.SetItemAsync("emailAddress", user.EmailAddress);
            await sessionStorage.SetItemAsync("token", user.AccessToken);


            ((Data.CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(user.EmailAddress);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            LoginMessage = "Invalid Username or password!";
        }

        return await System.Threading.Tasks.Task.FromResult(true);
    }
}
