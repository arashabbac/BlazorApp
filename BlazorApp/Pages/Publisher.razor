@page "/publishers"
@inject IJSRuntime JSRuntime;
@inject Services.IBookStoreService<Data.Publisher> bookStoreService
@inject Services.IUserService userService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorageService
@attribute [Microsoft.AspNetCore.Authorization.Authorize]

<div class="col-12">
    <h3><b>Enter Publisher Information</b></h3>
    <hr />
    <ServerValidations IsVisible="IsVisible" Result="Result">
        <span>Publisher : </span>@RecordName
    </ServerValidations>

    <EditForm Model="@publisher" OnValidSubmit="@SavePublisher">
        @*<DataAnnotationsValidator />*@

        <div class="col-12 row">
            <label class="col-2 font-weight-bold">first name :</label>
            <input @ref="publisherNameTextBox" class="form-control col-3" @bind="publisher.Publisher_Name" placeholder="publisher's name" />
            &nbsp;<ValidationMessage For="@(() => publisher.Publisher_Name)" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">city :</label>
            @*<InputSelect @bind-Value="publisher.City" class="form-control col-3">
                    @if (Cities != null)
                    {
                        @foreach (var city in Cities)
                        {
                            <option value="@city">@city</option>
                        }
                    }
                </InputSelect>*@
            <SelectCity></SelectCity>
            @*<InputText class="form-control col-3" @bind-Value="publisher.City" placeholder="city" />
                &nbsp;<ValidationMessage For="@(() => publisher.City)" />*@
        </div>
        <br />
        <div class="col-12 row">
            <span class="col-2"></span>
            <input type="submit" class="form-control col-1 btn btn-primary" value="Save" />
            <span>&nbsp;</span>
            <input type="submit" class="form-control col-1 btn btn-primary" value="Clear" />
        </div>

    </EditForm>

</div>

<br />
<div class="col-6">

    <h3><b>Publishers</b></h3>

    @*<MatTable Items="@publisherList" Striped="true" AllowSelection="true" RowClass="tester" class="mat-elevation-z5">
            <MatTableHeader>
                <th class="col-2">PublisherId</th>
                <th class="col-6">Publisher Name</th>
                <th class="col-4">City</th>
            </MatTableHeader>
            <MatTableRow>
                <td>@context.Pub_Id</td>
                <td>@context.Publisher_Name</td>
                <td>@context.City</td>
            </MatTableRow>
        </MatTable>*@



    @*<table class="table">
            <thead>
                <tr>
                    <th>Publisher Id</th>
                    <th>Publisher Name</th>
                    <th>Publisher City</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var publisher in publisherList)
                {
                    <tr>
                        <td>
                            <NavLink href="@string.Format("/authors/authordetail/{0}",@publisher.Pub_Id)">
                                @publisher.Pub_Id
                            </NavLink>
                        </td>
                        <td>@publisher.Publisher_Name</td>
                        <td>@publisher.City</td>
                        <td>
                            <a class="btn btn-outline-danger" @onclick="(() => DeletePublisher(publisher.Pub_Id))">Delete</a>
                            <a class="btn btn-outline-warning" @onclick="(() => EditPublisher(publisher))">Edit</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>*@


    <SpinLoader IsLoading="isLoading">
        <LoadingTemplate>
            <div class="col-12" style="background-color: lightgray; height:400px; vertical-align:middle">
                <br /><br />
                <Chase Center="true" Color="#c21f13" Size="70px"></Chase>
            </div>
        </LoadingTemplate>
        <ContentTemplate>
            @if (filteredPublisherList != null)
            {
                <GridView Items="filteredPublisherList">
                    <GridColumns>
                        <GridColumn ColumnTitle="PublisherId"
                                    OnSearchTextChanged="@(e => OnPublisherSearchTextChanged(e, "PublisherId"))"></GridColumn>
                        <GridColumn ColumnTitle="PublisherName"
                                    OnSearchTextChanged="@(e => OnPublisherSearchTextChanged(e, "PublisherName"))"></GridColumn>
                        <GridColumn ColumnTitle="City"
                                    OnSearchTextChanged="@(e => OnPublisherSearchTextChanged(e, "City"))"></GridColumn>

                        <GridColumn ColumnTitle="Actions"></GridColumn>
                    </GridColumns>
                    <GridRow Context="publisher">
                        <td>@publisher.Pub_Id</td>
                        <td>@publisher.Publisher_Name</td>
                        <td>@publisher.City</td>
                        <th>
                            <a class="btn btn-outline-warning" @onclick="(() => EditPublisher(publisher))">Edit</a>
                            <a class="btn btn-outline-danger" @onclick="(() => DeletePublisher(publisher.Pub_Id))">Delete</a>
                        </th>
                    </GridRow>

                </GridView>
            }
            else
            {
                <span>You may not to be authorized to see this information</span>
            }

        </ContentTemplate>
    </SpinLoader>


</div>


@code {

    public Data.Publisher publisher { get; set; }
    public List<Data.Publisher> publisherList { get; set; }
    public List<Data.Publisher> filteredPublisherList { get; set; }
    public string[] Cities { get; set; }
    ElementReference publisherNameTextBox;

    public bool IsVisible { get; set; }
    public string RecordName { get; set; }
    public bool ReloadList { get; set; }
    bool isLoading = true;
    public bool Result { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Cities == null)
        {
            Cities = await JSRuntime.InvokeAsync<string[]>("getCities");

            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        publisher = new Data.Publisher();
        //publisherList = publisherService.GetPublishers();
    }

    private async Task SavePublisher()
    {
        if(publisher.Pub_Id == 0)
        {
            await bookStoreService.SaveAsync("publishers/CreatePublisher", publisher);
        }
        else
        {
            await bookStoreService.UpdateAsync("publishers/UpdatePublisher", publisher.Pub_Id ,publisher);
        }

        await LoadPublisher();

        Result = true;
        IsVisible = true;
        RecordName = publisher.Publisher_Name;

        publisher = new Data.Publisher();

        //await JSRuntime.InvokeVoidAsync("saveMessage",publisherName, "");
        await JSRuntime.InvokeVoidAsync("SetFocusOnElement", publisherNameTextBox);
    }

    private async System.Threading.Tasks.Task LoadPublisher()
    {
        await System.Threading.Tasks.Task.Delay(500);

        publisherList = filteredPublisherList = await bookStoreService.GetAllAsync("publishers/GetPublishers");

        if(publisherList == null)
        {
            Data.RefreshRequest refreshRequest = new Data.RefreshRequest();
            refreshRequest.AccessToken = await sessionStorageService.GetItemAsync<string>("accessToken");
            refreshRequest.RefreshToken = await sessionStorageService.GetItemAsync<string>("refreshToken");

            publisherList = filteredPublisherList = await bookStoreService.GetAllAsync("publishers/GetPublishers");
        }

        StateHasChanged();
    }

    public async Task DeletePublisher(int publisherId)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirmDelete");

        if (confirm)
        {
            bookStoreService.DeleteAsync("publishers/DeletePublisher", publisherId);
        }
    }

    public async System.Threading.Tasks.Task EditPublisher(Data.Publisher argPublisher)
    {
        publisher = argPublisher;
    }

    private void OnPublisherSearchTextChanged(ChangeEventArgs changeEventArgs, string columnTitle)
    {
        string searchText = changeEventArgs.Value.ToString();

        ReloadList = true;

        switch (columnTitle)
        {
            case "PublisherId":
                filteredPublisherList = publisherList.Where(pub => pub.Pub_Id.ToString().Contains(searchText)).ToList();
                break;
            case "PublisherName":
                filteredPublisherList = publisherList.Where(pub => pub.Publisher_Name.ToLower().Contains(searchText)).ToList();
                break;
            case "City":
                filteredPublisherList = publisherList.Where(pub => pub.City.ToLower().Contains(searchText)).ToList();
                break;
            default:
                Console.WriteLine("Default case");
                break;
        }

        StateHasChanged();
    }
}